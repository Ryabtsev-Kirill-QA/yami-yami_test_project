{"name": "test_searching_position_in_menu", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.Dropdown_dropdown__33mLD.DesktopGeo_addressesList_dropdown__C1O4S')).has text Дворцовая пл, д. 2\n\nReason: AssertionError: actual text: \nScreenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701113297219\\1701113297219.png\nPageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701113297219\\1701113297219.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x0000020BF212B090>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.ElementCondition object at 0x0000020BF212B090>\nentity = <selene.core.entity.Element object at 0x0000020BF2F26F10>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x0000020BF2F26F10>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual text:\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_searching_position_in_menu():\n        main_page = MainPage()\n    \n        #current_address = 'Дворцовая площадь, д. 2'\n    \n        main_page.open()\n        main_page.go_to_address_form()\n    \n        main_page.choose_city('Санкт-Петербург')\n        main_page.fill_street('Дворцовая пл, д. 2')\n        main_page.fill_app_number('10')\n    \n        main_page.submit_address()\n    \n>       main_page.should_have_address('Дворцовая пл, д. 2')\n\ntest_select_address.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\main_page.py:58: in should_have_address\n    self.current_address.should(have.text(f'{current_address}'))\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:136: in should\n    self.wait.for_(condition)\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.ElementCondition object at 0x0000020BF212B090>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.Dropdown_dropdown__33mLD.DesktopGeo_addressesList_dropdown__C1O4S')).has text Дворцовая пл, д. 2\nE                   \nE                   Reason: AssertionError: actual text: \nE                   Screenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701113297219\\1701113297219.png\nE                   PageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701113297219\\1701113297219.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "attachments": [{"name": "stderr", "source": "0000820a-19f9-4e4a-b49e-8a8857b3de9a-attachment.txt", "type": "text/plain"}], "start": 1701113297244, "stop": 1701113321299, "uuid": "5c2cf953-d625-489c-b081-3998118d7b59", "historyId": "0719c148683be1aadc10599100622709", "testCaseId": "0719c148683be1aadc10599100622709", "fullName": "tests.test_select_address#test_searching_position_in_menu", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_select_address"}, {"name": "host", "value": "DESKTOP-U2EORTL"}, {"name": "thread", "value": "100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_select_address"}]}