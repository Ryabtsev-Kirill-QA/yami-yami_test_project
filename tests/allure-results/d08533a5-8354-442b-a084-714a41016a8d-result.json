{"name": "test_add_to_cart", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.Button____ap3zV.Button_height56__m3SdN.Button_themeDark__gsl3s.Button_isBorderRadius__f1LF7.SettingAddress_button__PgWKy')).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Button____ap3zV Button_height56__m3SdN Button_themeDark__gsl3s Button_isBorderRadius__f1LF7 SettingAddress_button__PgWKy\">...</button> is not clickable at point (722, 640). Other element would receive the click: <button type=\"button\" class=\"Button____ap3zV Button_height48__QNO8u Button_themeGreen__Kfex_ BasketButton_orderBtn__p8l9W\">...</button>\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x013572A3+45731]\n\t(No symbol) [0x012E2D51]\n\t(No symbol) [0x011D880D]\n\t(No symbol) [0x012107AB]\n\t(No symbol) [0x0120F2AF]\n\t(No symbol) [0x0120D89B]\n\t(No symbol) [0x0120CBA1]\n\t(No symbol) [0x01204FC0]\n\t(No symbol) [0x01227FDC]\n\t(No symbol) [0x01204A4E]\n\t(No symbol) [0x01228254]\n\t(No symbol) [0x0123B7A2]\n\t(No symbol) [0x01227DD6]\n\t(No symbol) [0x012031F6]\n\t(No symbol) [0x0120439D]\n\tGetHandleVerifier [0x01660716+3229462]\n\tGetHandleVerifier [0x016A84C8+3523784]\n\tGetHandleVerifier [0x016A214C+3498316]\n\tGetHandleVerifier [0x013E1680+611968]\n\t(No symbol) [0x012ECCCC]\n\t(No symbol) [0x012E8DF8]\n\t(No symbol) [0x012E8F1D]\n\t(No symbol) [0x012DB2C7]\n\tBaseThreadInitThunk [0x777805C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\n\tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\n\nScreenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701198968967\\1701198968967.png\nPageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701198968967\\1701198968967.html", "trace": "fn = <selene.core.wait.Command object at 0x0000023942C2ACD0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x0000023942C2ACD0>\nentity = <selene.core.entity.Element object at 0x000002394370B150>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000002394370B150>\n\n    def raw_click(element: Element):\n>       element.locate().click()\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:529: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"82538398e96f9101676593171d6911af\", element=\"A185E966DBACED4A69036AD85B9BAF8E_element_110\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"82538398e96f9101676593171d6911af\", element=\"A185E966DBACED4A69036AD85B9BAF8E_element_110\")>\ncommand = 'clickElement'\nparams = {'id': 'A185E966DBACED4A69036AD85B9BAF8E_element_110'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"82538398e96f9101676593171d6911af\")>\ndriver_command = 'clickElement'\nparams = {'id': 'A185E966DBACED4A69036AD85B9BAF8E_element_110'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023946043190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Button____ap3zV Button_height56__m3SdN Button_themeDark__gsl3s Button_isBorderRadius__f1LF7 SettingAddress_button__PgWKy\">...</button> is not clickable at point (722, 640). Other element would receive the click: <button type=\"button\" class=\"Button____ap3zV Button_height48__QNO8u Button_themeGreen__Kfex_ BasketButton_orderBtn__p8l9W\">...</button>\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x013572A3+45731]\nE       \t(No symbol) [0x012E2D51]\nE       \t(No symbol) [0x011D880D]\nE       \t(No symbol) [0x012107AB]\nE       \t(No symbol) [0x0120F2AF]\nE       \t(No symbol) [0x0120D89B]\nE       \t(No symbol) [0x0120CBA1]\nE       \t(No symbol) [0x01204FC0]\nE       \t(No symbol) [0x01227FDC]\nE       \t(No symbol) [0x01204A4E]\nE       \t(No symbol) [0x01228254]\nE       \t(No symbol) [0x0123B7A2]\nE       \t(No symbol) [0x01227DD6]\nE       \t(No symbol) [0x012031F6]\nE       \t(No symbol) [0x0120439D]\nE       \tGetHandleVerifier [0x01660716+3229462]\nE       \tGetHandleVerifier [0x016A84C8+3523784]\nE       \tGetHandleVerifier [0x016A214C+3498316]\nE       \tGetHandleVerifier [0x013E1680+611968]\nE       \t(No symbol) [0x012ECCCC]\nE       \t(No symbol) [0x012E8DF8]\nE       \t(No symbol) [0x012E8F1D]\nE       \t(No symbol) [0x012DB2C7]\nE       \tBaseThreadInitThunk [0x777805C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_add_to_cart():\n        main_page = MainPage()\n    \n        position = Position(name='Black and white')\n    \n        main_page.open()\n    \n>       main_page.go_to_address_form()\n\ntest_delete_from_cart.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\main_page.py:35: in go_to_address_form\n    self.location.click()\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:533: in click\n    self.wait.for_(\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x0000023942C2ACD0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.Button____ap3zV.Button_height56__m3SdN.Button_themeDark__gsl3s.Button_isBorderRadius__f1LF7.SettingAddress_button__PgWKy')).click\nE                   \nE                   Reason: ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Button____ap3zV Button_height56__m3SdN Button_themeDark__gsl3s Button_isBorderRadius__f1LF7 SettingAddress_button__PgWKy\">...</button> is not clickable at point (722, 640). Other element would receive the click: <button type=\"button\" class=\"Button____ap3zV Button_height48__QNO8u Button_themeGreen__Kfex_ BasketButton_orderBtn__p8l9W\">...</button>\nE                     (Session info: chrome=119.0.6045.160)\nE                   Stacktrace:\nE                   \tGetHandleVerifier [0x013572A3+45731]\nE                   \t(No symbol) [0x012E2D51]\nE                   \t(No symbol) [0x011D880D]\nE                   \t(No symbol) [0x012107AB]\nE                   \t(No symbol) [0x0120F2AF]\nE                   \t(No symbol) [0x0120D89B]\nE                   \t(No symbol) [0x0120CBA1]\nE                   \t(No symbol) [0x01204FC0]\nE                   \t(No symbol) [0x01227FDC]\nE                   \t(No symbol) [0x01204A4E]\nE                   \t(No symbol) [0x01228254]\nE                   \t(No symbol) [0x0123B7A2]\nE                   \t(No symbol) [0x01227DD6]\nE                   \t(No symbol) [0x012031F6]\nE                   \t(No symbol) [0x0120439D]\nE                   \tGetHandleVerifier [0x01660716+3229462]\nE                   \tGetHandleVerifier [0x016A84C8+3523784]\nE                   \tGetHandleVerifier [0x016A214C+3498316]\nE                   \tGetHandleVerifier [0x013E1680+611968]\nE                   \t(No symbol) [0x012ECCCC]\nE                   \t(No symbol) [0x012E8DF8]\nE                   \t(No symbol) [0x012E8F1D]\nE                   \t(No symbol) [0x012DB2C7]\nE                   \tBaseThreadInitThunk [0x777805C9+25]\nE                   \tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\nE                   \tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\nE                   \nE                   Screenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701198968967\\1701198968967.png\nE                   PageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701198968967\\1701198968967.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "start": 1701198982475, "stop": 1701198988489, "uuid": "b7e65b97-0eda-4c58-b639-d40c783a0cbc", "historyId": "d72526df371e7487aca50052eccad15f", "testCaseId": "d72526df371e7487aca50052eccad15f", "fullName": "tests.test_delete_from_cart#test_add_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_delete_from_cart"}, {"name": "host", "value": "DESKTOP-U2EORTL"}, {"name": "thread", "value": "13028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_delete_from_cart"}]}