{"name": "test_searching_position_in_menu", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x00A772A3+45731]\n\t(No symbol) [0x00A02D51]\n\t(No symbol) [0x008F880D]\n\t(No symbol) [0x008DF75E]\n\t(No symbol) [0x0094C11B]\n\t(No symbol) [0x0095B2D3]\n\t(No symbol) [0x00947DD6]\n\t(No symbol) [0x009231F6]\n\t(No symbol) [0x0092439D]\n\tGetHandleVerifier [0x00D80716+3229462]\n\tGetHandleVerifier [0x00DC84C8+3523784]\n\tGetHandleVerifier [0x00DC214C+3498316]\n\tGetHandleVerifier [0x00B01680+611968]\n\t(No symbol) [0x00A0CCCC]\n\t(No symbol) [0x00A08DF8]\n\t(No symbol) [0x00A08F1D]\n\t(No symbol) [0x009FB2C7]\n\tBaseThreadInitThunk [0x777805C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\n\tRtlGetAppContainerNamedObjectPath [0x7791788D+189]", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x000002A9D1993690>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.ElementCondition object at 0x000002A9D1993690>\nentity = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n>       actual = query(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Query object at 0x000002A9D1941590>\nentity = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n>   text: Query[Element, str] = Query('text', lambda element: element().text)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\query.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n    def __call__(self) -> WebElement:\n>       return self.locate()\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x000002A9D1962550>\n\n    def locate(self) -> WebElement:\n>       return self._locator()\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x000002A9D0B94C50>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\venv\\Lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n        self.config,\n    )\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:1133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e97deaf03830dbccbdb4cb0f71f69642\")>\nby = 'css selector'\nvalue = '.Dropdown_dropdown__33mLD.DesktopGeo_addressesList_dropdown__C1O4S'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e97deaf03830dbccbdb4cb0f71f69642\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '.Dropdown_dropdown__33mLD.DesktopGeo_addressesList_dropdown__C1O4S'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A9D1B9DC90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A772A3+45731]\nE       \t(No symbol) [0x00A02D51]\nE       \t(No symbol) [0x008F880D]\nE       \t(No symbol) [0x008DF75E]\nE       \t(No symbol) [0x0094C11B]\nE       \t(No symbol) [0x0095B2D3]\nE       \t(No symbol) [0x00947DD6]\nE       \t(No symbol) [0x009231F6]\nE       \t(No symbol) [0x0092439D]\nE       \tGetHandleVerifier [0x00D80716+3229462]\nE       \tGetHandleVerifier [0x00DC84C8+3523784]\nE       \tGetHandleVerifier [0x00DC214C+3498316]\nE       \tGetHandleVerifier [0x00B01680+611968]\nE       \t(No symbol) [0x00A0CCCC]\nE       \t(No symbol) [0x00A08DF8]\nE       \t(No symbol) [0x00A08F1D]\nE       \t(No symbol) [0x009FB2C7]\nE       \tBaseThreadInitThunk [0x777805C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_searching_position_in_menu():\n        main_page = MainPage()\n    \n        #current_address = 'Дворцовая площадь, д. 2'\n    \n        main_page.open()\n        main_page.go_to_address_form()\n    \n        main_page.choose_city('Санкт-Петербург')\n        main_page.fill_street('Дворцовая пл, д. 2')\n        main_page.fill_app_number('10')\n    \n        main_page.submit_address()\n    \n>       main_page.should_have_address('Дворцовая пл, д. 2')\n\ntest_select_address.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\main_page.py:56: in should_have_address\n    self.current_address.should(have.text(f'{current_address}'))\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:136: in should\n    self.wait.for_(condition)\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:141: in logic\n    raise self._hook_failure(failure)\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:1449: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:1277: in <lambda>\n    ] = lambda config, path=None: fp.thread(\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:83: in thread\n    return pipe(*functions)(arg)\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\common\\fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:1308: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:801: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:835: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:846: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A9D1B9DC90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A772A3+45731]\nE       \t(No symbol) [0x00A02D51]\nE       \t(No symbol) [0x008F880D]\nE       \t(No symbol) [0x008DF75E]\nE       \t(No symbol) [0x0094C11B]\nE       \t(No symbol) [0x0095B2D3]\nE       \t(No symbol) [0x00947DD6]\nE       \t(No symbol) [0x009231F6]\nE       \t(No symbol) [0x0092439D]\nE       \tGetHandleVerifier [0x00D80716+3229462]\nE       \tGetHandleVerifier [0x00DC84C8+3523784]\nE       \tGetHandleVerifier [0x00DC214C+3498316]\nE       \tGetHandleVerifier [0x00B01680+611968]\nE       \t(No symbol) [0x00A0CCCC]\nE       \t(No symbol) [0x00A08DF8]\nE       \t(No symbol) [0x00A08F1D]\nE       \t(No symbol) [0x009FB2C7]\nE       \tBaseThreadInitThunk [0x777805C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779178BD+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x7791788D+189]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "stderr", "source": "37b0d073-7ef0-4519-aab5-dbb9a9536489-attachment.txt", "type": "text/plain"}], "start": 1701112622593, "stop": 1701112656562, "uuid": "7eba5d55-1f4a-41bf-9cf6-710cd851c506", "historyId": "0719c148683be1aadc10599100622709", "testCaseId": "0719c148683be1aadc10599100622709", "fullName": "tests.test_select_address#test_searching_position_in_menu", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_select_address"}, {"name": "host", "value": "DESKTOP-U2EORTL"}, {"name": "thread", "value": "8440-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_select_address"}]}