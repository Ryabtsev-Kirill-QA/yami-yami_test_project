{"name": "test_searching_position_in_menu", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.TextField_input__kPCFe.TextField_float__tP_Xy')).type: 10\n\nReason: ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=119.0.6045.160)\nStacktrace:\n\tGetHandleVerifier [0x006072A3+45731]\n\t(No symbol) [0x00592D51]\n\t(No symbol) [0x004886D0]\n\t(No symbol) [0x004B8118]\n\t(No symbol) [0x004B774F]\n\t(No symbol) [0x004D7FDC]\n\t(No symbol) [0x004B4A4E]\n\t(No symbol) [0x004D8254]\n\t(No symbol) [0x004EB7A2]\n\t(No symbol) [0x004D7DD6]\n\t(No symbol) [0x004B31F6]\n\t(No symbol) [0x004B439D]\n\tGetHandleVerifier [0x00910716+3229462]\n\tGetHandleVerifier [0x009584C8+3523784]\n\tGetHandleVerifier [0x0095214C+3498316]\n\tGetHandleVerifier [0x00691680+611968]\n\t(No symbol) [0x0059CCCC]\n\t(No symbol) [0x00598DF8]\n\t(No symbol) [0x00598F1D]\n\t(No symbol) [0x0058B2C7]\n\tBaseThreadInitThunk [0x75BC05C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x776478BD+237]\n\tRtlGetAppContainerNamedObjectPath [0x7764788D+189]\n\nScreenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701000058820\\1701000058820.png\nPageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701000058820\\1701000058820.html", "trace": "fn = <selene.core.wait.Command object at 0x000001C83C0FF890>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000001C83C0FF890>\nentity = <selene.core.entity.Element object at 0x000001C83BEC23D0>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000001C83BEC23D0>\n\n    def fn(element: Element):\n        if self.config.wait_for_no_overlap_found_by_js:\n            webelement = element._actual_not_overlapped_webelement\n        else:\n            webelement = element()\n>       webelement.send_keys(str(text))\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"c4eeae50653ff64aff308e90e9c0aec1\", element=\"5C3ED0B0BA735EB4066B7C838B48BF88_element_20\")>\nvalue = ('10',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(\n                map(\n                    lambda keys_to_send: self.parent.file_detector.is_local_file(str(keys_to_send)),\n                    \"\".join(map(str, value)).split(\"\\n\"),\n                )\n            )\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = \"\\n\".join(remote_files)\n    \n>       self._execute(\n            Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        )\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"c4eeae50653ff64aff308e90e9c0aec1\", element=\"5C3ED0B0BA735EB4066B7C838B48BF88_element_20\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '5C3ED0B0BA735EB4066B7C838B48BF88_element_20', 'text': '10', 'value': ['1', '0']}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c4eeae50653ff64aff308e90e9c0aec1\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '5C3ED0B0BA735EB4066B7C838B48BF88_element_20', 'text': '10', 'value': ['1', '0']}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C83B06B850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776478BD+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7764788D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=119.0.6045.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x006072A3+45731]\nE       \t(No symbol) [0x00592D51]\nE       \t(No symbol) [0x004886D0]\nE       \t(No symbol) [0x004B8118]\nE       \t(No symbol) [0x004B774F]\nE       \t(No symbol) [0x004D7FDC]\nE       \t(No symbol) [0x004B4A4E]\nE       \t(No symbol) [0x004D8254]\nE       \t(No symbol) [0x004EB7A2]\nE       \t(No symbol) [0x004D7DD6]\nE       \t(No symbol) [0x004B31F6]\nE       \t(No symbol) [0x004B439D]\nE       \tGetHandleVerifier [0x00910716+3229462]\nE       \tGetHandleVerifier [0x009584C8+3523784]\nE       \tGetHandleVerifier [0x0095214C+3498316]\nE       \tGetHandleVerifier [0x00691680+611968]\nE       \t(No symbol) [0x0059CCCC]\nE       \t(No symbol) [0x00598DF8]\nE       \t(No symbol) [0x00598F1D]\nE       \t(No symbol) [0x0058B2C7]\nE       \tBaseThreadInitThunk [0x75BC05C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x776478BD+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x7764788D+189]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_searching_position_in_menu():\n        main_page = MainPage()\n    \n        #current_address = 'Дворцовая площадь, д. 2'\n    \n        main_page.open()\n        main_page.go_to_address_form()\n    \n        main_page.choose_city('Санкт-Петербург')\n        main_page.fill_street('Дворцовая площадь, д. 2')\n>       main_page.fill_app_number('10')\n\ntest_select_address.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\main_page.py:45: in fill_app_number\n    self.app_number.type(app_number)\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:459: in type\n    self.wait.for_(\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000001C83C0FF890>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.TextField_input__kPCFe.TextField_float__tP_Xy')).type: 10\nE                   \nE                   Reason: ElementNotInteractableException: Message: element not interactable\nE                     (Session info: chrome=119.0.6045.160)\nE                   Stacktrace:\nE                   \tGetHandleVerifier [0x006072A3+45731]\nE                   \t(No symbol) [0x00592D51]\nE                   \t(No symbol) [0x004886D0]\nE                   \t(No symbol) [0x004B8118]\nE                   \t(No symbol) [0x004B774F]\nE                   \t(No symbol) [0x004D7FDC]\nE                   \t(No symbol) [0x004B4A4E]\nE                   \t(No symbol) [0x004D8254]\nE                   \t(No symbol) [0x004EB7A2]\nE                   \t(No symbol) [0x004D7DD6]\nE                   \t(No symbol) [0x004B31F6]\nE                   \t(No symbol) [0x004B439D]\nE                   \tGetHandleVerifier [0x00910716+3229462]\nE                   \tGetHandleVerifier [0x009584C8+3523784]\nE                   \tGetHandleVerifier [0x0095214C+3498316]\nE                   \tGetHandleVerifier [0x00691680+611968]\nE                   \t(No symbol) [0x0059CCCC]\nE                   \t(No symbol) [0x00598DF8]\nE                   \t(No symbol) [0x00598F1D]\nE                   \t(No symbol) [0x0058B2C7]\nE                   \tBaseThreadInitThunk [0x75BC05C9+25]\nE                   \tRtlGetAppContainerNamedObjectPath [0x776478BD+237]\nE                   \tRtlGetAppContainerNamedObjectPath [0x7764788D+189]\nE                   \nE                   Screenshot: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701000058820\\1701000058820.png\nE                   PageSource: file://C:\\Users\\Kirill\\.selene\\screenshots\\1701000058820\\1701000058820.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "attachments": [{"name": "stderr", "source": "83f4c9f8-747e-4a18-b566-2ab0e72441d9-attachment.txt", "type": "text/plain"}], "start": 1701000058848, "stop": 1701000070779, "uuid": "e5a1cf2c-2fea-4a51-87d9-5abc5d8bb3b0", "historyId": "0719c148683be1aadc10599100622709", "testCaseId": "0719c148683be1aadc10599100622709", "fullName": "tests.test_select_address#test_searching_position_in_menu", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_select_address"}, {"name": "host", "value": "DESKTOP-U2EORTL"}, {"name": "thread", "value": "11788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_select_address"}]}